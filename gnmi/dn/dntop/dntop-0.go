/*
Package dntop is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.18)
using the following YANG input files:
  - /dn/yangs/dn-top.yang

Imported modules were sourced from:
*/
package dntop

import (
	oc "github.com/openconfig/ondatra/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// DrivenetsTopPath represents the /dn-top/drivenets-top YANG schema element.
type DrivenetsTopPath struct {
	*ygnmi.NodePath
}

// DrivenetsTopPathAny represents the wildcard version of the /dn-top/drivenets-top YANG schema element.
type DrivenetsTopPathAny struct {
	*ygnmi.NodePath
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *DrivenetsTopPath) State() ygnmi.SingletonQuery[*oc.DrivenetsTop] {
	return ygnmi.NewSingletonQuery[*oc.DrivenetsTop](
		"DrivenetsTop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *DrivenetsTopPathAny) State() ygnmi.WildcardQuery[*oc.DrivenetsTop] {
	return ygnmi.NewWildcardQuery[*oc.DrivenetsTop](
		"DrivenetsTop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DrivenetsTopPath) Config() ygnmi.ConfigQuery[*oc.DrivenetsTop] {
	return ygnmi.NewConfigQuery[*oc.DrivenetsTop](
		"DrivenetsTop",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *DrivenetsTopPathAny) Config() ygnmi.WildcardQuery[*oc.DrivenetsTop] {
	return ygnmi.NewWildcardQuery[*oc.DrivenetsTop](
		"DrivenetsTop",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
